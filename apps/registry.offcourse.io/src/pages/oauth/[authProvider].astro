--- 
export const prerender = false;
import { authState } from "@offcourse/schema"
import { db } from "../../db"
import { eq, and } from 'drizzle-orm';
import { curator, auth } from "../../schema";
import { GITHUB_CLIENT_SECRET, GITHUB_CLIENT_ID, PLATFORM_URL } from "astro:env/server"

const { authProvider } = Astro.params;

if (!authProvider) {
  return Astro.redirect("/");
}

const urlSearchParams = Astro.url.searchParams
const { state, code } = Object.fromEntries(urlSearchParams.entries());

if (!state || !code) {
  return Astro.redirect(`${PLATFORM_URL}/`);
}

const stateUrl = new URL(state)
const { courseId } = Object.fromEntries(stateUrl.searchParams.entries());

const auth_response = await fetch("https://github.com/login/oauth/access_token", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Accept-Encoding": "application/json",
  },
  body: JSON.stringify({
    client_id: GITHUB_CLIENT_ID,
    client_secret: GITHUB_CLIENT_SECRET,
    code
  })
});

const { token_type, access_token } = await auth_response.json();

const user_response = await fetch("https://api.github.com/user", {
  headers: {
    "Authorization": `${token_type} ${access_token}`
  },
});

const { login } = await user_response.json();
const { userName, repository } = await getUser({ authProvider, login });

if (!repository) {
  const authData = { authProvider, token_type, access_token, login, state, courseId }
  const newParams = new URLSearchParams(authData);
  const redirectURL = `${PLATFORM_URL}/signup/?${newParams}`
  return Astro.redirect(redirectURL);
}

const authData = authState.parse({
  authProvider,
  tokenType: token_type,
  accessToken: access_token,
  userName,
  repository
})

const newParams = new URLSearchParams(authData);
return Astro.redirect(`${stateUrl.origin}${stateUrl.pathname}?${newParams}`);

async function getUser({ login, authProvider }: { authProvider: string, login: string }) {
  const authEntries= await db.select({
    userName: auth.userName,
    repository: curator.repository
  }).
    from(auth)
    .where(
      and(
        eq(auth.login, login),
        eq(auth.provider, authProvider)
      )
    )
    .leftJoin(
      curator, eq(auth.userName, curator.userName)
    );
  console.log("Registered User", authEntries);
  return authEntries[0] || { userName: login, repository: undefined }
}
---
