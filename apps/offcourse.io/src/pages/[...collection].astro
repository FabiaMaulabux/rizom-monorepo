---
import type { Course } from '@offcourse/schema';
import { QueryType, CollectionType } from '@offcourse/schema';
import { Offcourse } from "@offcourse/ui"
import { BaseHead, OGType, RoutesMenu } from "@/components";
import Layout from "@/layouts/Base.astro"
import { handleQuery } from '@offcourse/db/query';

export async function getStaticPaths() {
  return Object.keys(CollectionType).map(collection =>({
    params: { 
      collection: collection === CollectionType.CURATED ? undefined : collection.toLowerCase() 
    },
    props: { collection },
  }))
}

const { collection } = Astro.props;

const queryTypes = {
  [CollectionType.BOOKMARKED]: QueryType.GET_BOOKMARKED_COURSES,
  [CollectionType.FOLLOWED]: QueryType.GET_FOLLOWED_COURSES,
  [CollectionType.ALL]: QueryType.GET_ALL_COURSES,
  [CollectionType.CURATED]: QueryType.GET_CURATED_COURSES 
}

const queryType = queryTypes[collection]

const data  = await handleQuery({type: queryType, payload: undefined}, false)
const courses = data.payload as Course[];
const description = "COURSES";
const title = "Offcourse";

const routes = {
  [CollectionType.BOOKMARKED]: "bookmarked",
  [CollectionType.FOLLOWED]: "followed",
  [CollectionType.ALL]: "all",
  [CollectionType.CURATED]: "/"
}

const links = Object.entries(routes).map(([title, href]) => ({title, href}));

---
<Layout {title}>
  <BaseHead 
    slot="og:data" 
    type={OGType.WEBSITE} 
    {title} 
    {description} 
    url={Astro.url} />
  <main class="bg-white text-black dark:bg-black dark:text-white print:bg-pure-white print:text-pitch-black print:py-24 w-full px-5 sm:px-8 gap-8 py-12 py-20 lg:py-24 mx-auto">
    <Offcourse data={courses} client:load/>
    <RoutesMenu client:load className="fixed bottom-0 right-0" value={collection} links={links}/>
  </main>
</Layout>
